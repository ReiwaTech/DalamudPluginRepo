name: Create Release and Update Repository

on:
  workflow_call:
    inputs:
      internal_name:
        type: string
        required: true
      solution_name:
        type: string
        required: true
      build_configuration:
        type: string
        required: true
      personal_plugin_repo:
        type: string
        required: true
      personal_plugin_repo_branch:
        type: string
        required: true
      output_directory:
        type: string
        required: false
        default: ''
    secrets:
      PAT:
        required: true

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      - name: Download Dalamud
        run: |
          Invoke-WebRequest -Uri https://reiwatech.github.io/dalamud-distrib/cn/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev\"

      - name: Restore NuGet Packages
        run: nuget restore ${{ inputs.solution_name }}.sln

      - name: Build
        run: msbuild ${{ inputs.solution_name }}.sln /p:Configuration=${{ inputs.build_configuration }}

      - name: Detect output directory
        run: |
          Write-Output ":: Working Directory"
          Get-Location
          
          Write-Output ":: Listing all dll files"
          Get-ChildItem -Filter *.dll -Recurse -ErrorAction SilentlyContinue -Force
          
          Write-Output ":: Detecting output directory"
          $directories = @(
              "${{ inputs.output_directory }}",
              "./bin/${{ inputs.build_configuration }}/${{ inputs.solution_name }}",
              "./${{ inputs.solution_name }}/bin/${{ inputs.build_configuration }}",
              "./bin/${{ inputs.build_configuration }}"
          ) | Where-Object { $_ -ne "" }
          
          foreach ($directory in $directories) {
              Write-Output "Checking $directory"
              $dllFiles = Get-ChildItem -Path $directory -Filter "*.dll" -File -ErrorAction SilentlyContinue
          
              if ($dllFiles.Count -gt 0) {
                  Write-Output "Found dll file(s)"
                  echo ("OUTPUT_DIR=" + $directory + "/*") >> $env:GITHUB_ENV
                  break
              }
          }
          
          if (-not $directory) {
              throw "Error: Directory is not set."
          }
          
          Write-Output ":: Listing output files"
          Get-ChildItem -Path $directory -Recurse | Where-Object { $_.PSIsContainer -eq $false } | Select-Object FullName
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        if: env.OUTPUT_DIR
        with:
          path: ${{ env.OUTPUT_DIR }}/*

  deploy:
    needs: build
    runs-on: windows-2022

    steps:
      - name: Checkout Plugin Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.personal_plugin_repo }}
          token: ${{ secrets.PAT }}
          ref: ${{ inputs.personal_plugin_repo_branch }}

      - name: Download Plugin Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: plugins/${{ inputs.internal_name }}

      - name: Commit
        uses: EndBug/add-and-commit@v9
        with:
          add: ./plugins/${{ inputs.internal_name }}/${{ inputs.internal_name }}.json
          author_name: GitHub Action
          author_email: github-actions[bot]@users.noreply.github.com
          message: ${{ inputs.internal_name }} ${{ github.ref_name }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./plugins/${{ inputs.internal_name }}/latest.zip
          draft: false
          prerelease: false
